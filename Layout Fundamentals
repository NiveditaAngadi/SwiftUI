Reference:
https://developer.apple.com/documentation/swiftui/picking-container-views-for-your-content#Group-collections-of-views
https://developer.apple.com/documentation/swiftui/building-layouts-with-stack-views
https://developer.apple.com/documentation/swiftui/creating-performant-scrollable-stacks

Layout Fundamentals
Arrange views inside built-in layout containers like stacks and grids. 

Use layout containers to arrange the elements of your userinterface. 
Stacks and grids update and adjust the positions of the subviews they contain in response to changes in content or interface dimensions of the subviews they contain in response
to changes in content or interface dimensions. 
You can nest layout containers inside other layout containers to any depth to achieve complex layout effects. 

You can use the layout adjustments to finetune the position, alignment, and other elements of a layout that you build with layout container views. 
You can define your own custom layout containers.
For designing layout consider the reference of Human Interface guidelines. 

There are different container which helps to achieve the desired designs. 
Following are containers which you can use based on various scenarios. 
1. Statically arranging views in one dimension 
    With the Stacks - HStack and VStack 
2. Dynamically arranging views in one dimension 
    With grouping data with lazy stack views. 
    Creating peformant scrollable stacks -> LazyHStack and LazyVStack, PinnedScrollableViews 
3. Stastically arranging views in two dimensions. 
   Grid 
   GridRow 
   gridCellColumns 
   gridCellAnchor 

4. Dynamically arranging views in two dimensions. 
    LazyHGrid 
    LazyVGrid 
    GridItem 
5. Layering Views 
   Adding background to your view. 
   ZStack 


** Picking container views for your context ** 
Build flexible user interfaces by using stacks, grids, lists and forms. 

Container views helps to arrange data in the app as per the design. 
Use some containers puerly for structure and layout, like stack views, lazy stack views, and grid views. 
Use others like forms, to also adopt system-standard visuals and interactivity. 

Choosing the most appropriate container views for each part of your app’s user interface is an important skill to learn; 
it helps you with everything from positioning two views next to each other, to creating complex layouts with hundreds of elements.

1. When you will use stackViews?
Stackviews are the most primitive layout container available in SwiftUI. 
Use stacks to group collections of views into horizontal (HStack) or vertical(VStack) lines, or to stack them on top of one another(ZStack). 
Usually, use stackviews as building blocks inside other container views. 
For example, a List typically contains stack views, with which you layout views inside each row. 

If you want to repeat views or group of views, you can also use HStack, VStack, LazyHStack, and LazyVStack to repeat views or groups of views. 
Place a view inside a scroll view, so your content can expand beyond the bounds of its container. User can simultaneously scroll horizontally, or in both directions. 

*** Stackviews ***  load their child views all at once, making layout fast and reliable, because system knows the size and shape of every subview as it loads them. 
*** Lazy Stacks *** trade some degree of layout correctness for performance, because the system only calculates the geometry for subviews as they become visible. 

Note:
When choosing the type of stack view to use, always start with a standard stack view and only switch to a lazy stack if profiling your code shows a worthwhile performance improvement.

2. Which container view you use when the need to position views in a two-dimensional layout?
To layout views horizontally and vertically at the same time, use a LazyHGrid or LazyVGrid. 
Grids are a good container choice to lay out content that naturally displays in square containers, like an image gallery. 
Grids are also a good choice to scale user interface layouts up for display on larger devices. 
For example, a directory of contact information might suit a list or vertical stack on an iPhone, 
but might fit more naturally in a grid layout when scaled up to a larger device like the iPad or Mac.

Like stackviews, SwiftUI grid views don't inherently include a scrolling viewport, place them inside a ScrollView if the content might be larger than the available space. 

3. Which contanier views you use when the need is to display and interact with collections of data?
List. 
List views conceptually similar to the combination of a LazyVStack and ScrollView, but by default will include platform-appropraite visual styling around and between 
their contained items. 
For example, when running on iOS, the default configuration of a List adds separator lines between rows, and draws disclosure indicators for items which have navigation, 
and where the list is contained in a NavigationView.

List views also support platform-appropriate interactivity for common tasks such as inserting, reordering, and removing items. 
For example, adding the onDelete(perform:) modifier to a ForEach inside a List will enable system-standard swipe-to-delete interactivity.

Like LazyHStack and LazyVStack, rows inside a SwiftUI List also load lazily, and there is no non-lazy equivalent. 
Lists inherently scroll when necessary, and you don’t need to wrap them in a ScrollView.

4. When do you use form?
Use form to build data-entry interfaces, settings or preferenence screens that use system-standard controls. 
Like all SwiftUI views, forms display their content in a platform-appropriate way. 
Be aware that the layout of controls inside a Form may differ significantly based on the platform.For example, a Picker control in a Form on iOS adds navigation, showing the picker’s choices on a separate screen,
while the same Picker on macOS displays a pop-up button or set of radio buttons.


