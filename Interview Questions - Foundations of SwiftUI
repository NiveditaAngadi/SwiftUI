https://developer.apple.com/documentation/swiftui/textfield
https://developer.apple.com/tutorials/swiftui/creating-and-combining-views
https://developer.apple.com/documentation/widgetkit/swiftui-views
https://developer.apple.com/documentation/swiftui/observedobject


One of SwiftUI's most distinguishing features is the layout system. 
This system offers programmers enough options to create highly sophisticated layouts and animations to user can engage in. 

1. Explain about frame.
Swift is a built-in modifier called "Frame" that can be used to manipulate views. 
When applying modifiers to a view, you're often not modifying view at all but rather encapsulating 
it in a new transparent view.
However this does not make frame constraint, nor does it make it the frame or bounds of a view. 
Frames actually yet another view. 
One of the SwiftUI's greatest advantages is its lack of ambiguous framing, which is especially apparent when 
compared to its predecessor Autolayout. 
The system does its best to always produce the best result and give you control when needed. 

Every view that is displayed on the screen is a rectangle.
Views that donâ€™t appear to be a rectangle are drawn in a rectangle. This rectangle is called the frame of the view.

The .frame() modifier creates a new invisible view with the specified size. 

2. Explain layout process in Swift
Let's explore SwiftUI's layout process. 
SwiftUI's built-in frame modifier can be used to both assign static width or height to a given view 
or 
to apply constraints  like bounds within which the view can grow or shrink depending on its contents or surroundings.

When parent must lay out one of its child views, it proceeds in three steps. 
1. The parent offers some size to a child view. 
2. The child view decides the size it requires, eventually taking into account the parent size offer in which the child is free 
to ignore entirely, it then returns the size it requires to its parent. 
3. Finally, the parent lays out the child somewhere strictly respecting the size that child requested. 

3. What is Stack 
Primary layout instrument in SwiftUI. Core method for aligning views with each other is using stacks.

4. What is HStack 
HStack arranges views in a left to right list. 

5. What is VStack 
VStack arranges views in a top to bottom list. 

6. What is ZStack 
If you want to overlay views, in other words, put one view on top of another, you cna use ZStack.
Spatial display of child views that stacks them from the bottom to the top. 
Child views that are higher in the stack are displayed over lower children.

7. What is Spacer?
 Spacers are one of the preferred methods for placing objects in SwiftUI. 
Although spacers do not offer the most adjustability when designing a layout, 
they do provide a quick and easy way to evenly distribute items either vertically or horizontally within your UI.

8. What is Padding?
When you need precise when placing a view, that's where padding comes in and becomes very useful for SwiftUI developers. 
Padding allows the developer to offset and align views in iOS application. 
With padding you can specify exact amount of padding that you want to place on an element for the leading, trailing, top and bottom.
By default, this adds the system-defined amount of space on all four sides of a view.

9. What is alignment?
The alignment parameter is part of the frame modifier as well as stacks, 
for example, if you want to align texts and the view, you can use top leading to align a view from the top left corner of a view. 

10. Will the Stack use maximum available space in the View?
 No. Stacks will always try to use the minimum space necessary to fit all elements.
 If you want a stack to fill a designated space you have to force it to do so. 

11. What happens to the vertical size of a VStack if there is space available and we apply a frame modifier like this?
VStack {
  Text("Little Lemon Restaurant")
  Text("RESERVATION")
}
.frame(width: 400, height:600)

Nothing happens, The stack continues with same vertical size as before. 

12. What will be the output of following code?
ZStack {
  HStack { 
    Text("Little Lemon Restaurant")
    Text("RESERVATION")
  }
  Image("littleLemonRestaurantLogo")
}

A horizontal stack will be rendered inside the ZStack containing both text elements side by side and the Little Lemon Restaurant logo 
will be rendered on top of that. 

13. What are the basic controls in SwiftUI?
Controls are visual elements that form the basis of all iOS applications. 
They encapsulate functionality within elements that resembles real-world objects like Buttons, Toggle, 
Steppers, Sliders, ProgressView, DatePicker, Labels.
They are included in the framework by default.

14. Buttons 
In SwiftUI, Buttons used closures to execute actions. When you write code you must include code how the button should look like, and
what action it should perform. 

Button( 
  action: {
  }, 
  label: { Text("Press me") }
)

15. Toggle 
Toggles help switch between states of true and false. 

@State var isShowing = true //toggle state 
Toggle(isOn: @isShowing) {
 Text("Notifications")
}

16. Stepper 
Steppers are used to perform semantic increment and decrement actions. 
If you want full control, you have the option of using a bare-bone stepper, where you manage your own datasource. 

@State private var value = 1

var body: some View {
 NavigationView { 
   VStack {
      Text("Current value: \(value)")
      Stepper ("Number of guests?", value: $value, in 1...20) 
      }
      .padding()
      .navigationTitle("Reservation Form")
  }
}

17. Sliders 
If you need to select a value from abadndoned linear range of values, you can use Sliders as the control. 
Example: Volume control. 

@State private var size: CGFloat = 0.1 

var body: some View {
VStack {
 Text("SureSkills")
 .font(.system(size: size * 50))
 Slider(value: $size)
}
.padding()
}

18. ProgressView 
View which is a view that showed the progress towards the completion of the task. 

@State private var progress = 0.5 

VStack {
 ProgressView(value: progress)
 Button("Loading", action: {
 progress += 0.5 }) 
}

19. DatePicker
If your app requires selecting an absolute date, Date picker is useful control. 

 @State var selectedDate = Date()
    var dateClosedRange: ClosedRange<Date> {
        let min = Calendar.current.date(byAdding: .day, value: -1, to: Date())!
        let max = Calendar.current.date(byAdding: .day, value: 1, to: Date())!
        
        return min...max
    }

    NavigationView {
            Form {
                Section {
                    DatePicker(
                        selection: $selectedDate,
                        in: dateClosedRange,
                        displayedComponents: .date,
                        label: { Text("Select Date") }
                        )
                }
            }
        }

20. Label 
A label is a convinent view that presents an image and text alongside each other. 

Label("Website", image: "Little lemon logo") 

21. Adding images.
1. System images 
2. Local images 

SF Images are - Vector images - provided by Apple. 

1. System Images are added as is, 

 Image(systemName: "arrow.right.circle")

2. Local images - where you add image resource to the Assets Catalog of Xcode. 

Image("Lemon Logo")
 .resizable()
 .aspectRatio(contentMode: .fit)
 .frame(width: 50, height: 50)

22. Container View
Combining one or more views. 
- Invisible View 
- Parent and Child Views 

Stack views - contains one or views. 
HStack - Horizontal alignment of views 
VStack - Vertical alignment of views 
ZStack - Alignment of views in depth

23. Views within view. 
Every view in SwiftUI is struct. 
Structures are simpler and faster than classes.

Binding is basically property wrapper binds the local variable; to an external variable, and is received when the view initializes.

State and Binding need not be same name. 



